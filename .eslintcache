[{"C:\\Users\\Pichau\\Documents\\projetos\\liferay-app\\src\\index.js":"1","C:\\Users\\Pichau\\Documents\\projetos\\liferay-app\\src\\reportWebVitals.js":"2","C:\\Users\\Pichau\\Documents\\projetos\\liferay-app\\src\\App.js":"3","C:\\Users\\Pichau\\Documents\\projetos\\liferay-app\\src\\components\\navbar.js":"4","C:\\Users\\Pichau\\Documents\\projetos\\liferay-app\\src\\pages\\Main.js":"5","C:\\Users\\Pichau\\Documents\\projetos\\liferay-app\\src\\services\\repositories.js":"6","C:\\Users\\Pichau\\Documents\\projetos\\liferay-app\\src\\services\\api.js":"7","C:\\Users\\Pichau\\Documents\\projetos\\liferay-app\\src\\utils\\utils.js":"8","C:\\Users\\Pichau\\Documents\\projetos\\liferay-app\\src\\components\\addRepository.js":"9","C:\\Users\\Pichau\\Documents\\projetos\\liferay-app\\src\\components\\modalConfirmDelete.js":"10","C:\\Users\\Pichau\\Documents\\projetos\\liferay-app\\src\\components\\cardRepository.js":"11"},{"size":500,"mtime":499162500000,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":303,"mtime":1607349697302,"results":"15","hashOfConfig":"13"},{"size":8232,"mtime":1607354472271,"results":"16","hashOfConfig":"13"},{"size":3276,"mtime":1607354352279,"results":"17","hashOfConfig":"13"},{"size":704,"mtime":1607346198766,"results":"18","hashOfConfig":"13"},{"size":106,"mtime":1607328460053,"results":"19","hashOfConfig":"13"},{"size":710,"mtime":1607342494628,"results":"20","hashOfConfig":"13"},{"size":3525,"mtime":1607355379141,"results":"21","hashOfConfig":"13"},{"size":1392,"mtime":1607340863520,"results":"22","hashOfConfig":"13"},{"size":10185,"mtime":1607354111411,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1wuhumc",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"26"},"C:\\Users\\Pichau\\Documents\\projetos\\liferay-app\\src\\index.js",[],["52","53"],"C:\\Users\\Pichau\\Documents\\projetos\\liferay-app\\src\\reportWebVitals.js",[],"C:\\Users\\Pichau\\Documents\\projetos\\liferay-app\\src\\App.js",[],"C:\\Users\\Pichau\\Documents\\projetos\\liferay-app\\src\\components\\navbar.js",["54","55"],"import \"@clayui/css/lib/css/atlas.css\";\r\nimport ClayDropDown from '@clayui/drop-down';\r\nimport { useEffect, useState } from 'react';\r\nimport { ClayInput } from '@clayui/form';\r\nimport AddRepository from './addRepository';\r\nimport ClayManagementToolbar from '@clayui/management-toolbar';\r\nimport ClayButton from '@clayui/button';\r\nimport ClayIcon from '@clayui/icon';\r\n\r\nexport default function Navbar({ search, onSearch, onAdd, onFilterByFavorite, onSort, onListModeChange }) {\r\n    const [menuListModeActive, setMenuListModeActive] = useState(false);\r\n    const [menuSortActive, setMenuSortActive] = useState(false);\r\n    const [menuAddActive, setMenuAddActive] = useState(false);\r\n    const [filterByFavorite, setFilterByFavorite] = useState(false);\r\n    const [listMode, setListMode] = useState('grid');\r\n\r\n    useEffect(() => {\r\n        if (!search) {\r\n            document.querySelector('#searchInput').value = '';\r\n        }\r\n    }, [search]);\r\n\r\n    function handleSearch(event) {\r\n        onSearch(event.target.value);\r\n    }\r\n\r\n    function handleFilterByFavorite() {\r\n        const value = !filterByFavorite;\r\n        setFilterByFavorite(value);\r\n        onFilterByFavorite(value);\r\n    }\r\n\r\n    function handleSort(menuOption) {\r\n        onSort(menuOption.param);\r\n        setMenuSortActive(false);\r\n    }\r\n\r\n    function handleListMode(mode) {\r\n        setListMode(mode);\r\n        onListModeChange(mode);\r\n        setMenuListModeActive(false);\r\n    }\r\n\r\n    return (\r\n        <nav className=\"application-bar application-bar-light bg-white navbar navbar-expand-md\">\r\n            <div className=\"container-fluid container-fluid-max-xl\">\r\n                <ul className=\"navbar-nav\">\r\n                    <li className=\"nav-item mr-3\">\r\n                        <img src=\"https://img.icons8.com/fluent-systems-filled/24/000000/github.png\" />\r\n                    </li>\r\n                    <li className=\"nav-item mr-3\">\r\n                        <div className=\"navbar-title navbar-text-truncate\">Github Compare</div>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <ClayDropDown\r\n                            trigger={<button className=\"btn\">\r\n                                Filter and order\r\n                                <ClayIcon symbol=\"caret-bottom\" className=\"ml-2\" />\r\n                            </button>}\r\n                            active={menuSortActive}\r\n                            onActiveChange={setMenuSortActive}\r\n                        >\r\n                            <ClayDropDown.Group header=\"Order\">\r\n                                <ClayDropDown.ItemList>\r\n                                    {\r\n                                        [\r\n                                            { param: 'stargazers_count', title: 'Stars' },\r\n                                            { param: 'forks_count', title: 'Forks' },\r\n                                            { param: 'open_issues_count', title: 'Open Issues' },\r\n                                            { param: 'created_at', title: 'Age' },\r\n                                            { param: 'last_commit_date', title: 'Last commit' }\r\n                                        ].map(_menuOption => (\r\n                                            <ClayDropDown.Item key={_menuOption.param} onClick={() => handleSort(_menuOption)}>\r\n                                                {_menuOption.title}\r\n                                            </ClayDropDown.Item>\r\n                                        ))\r\n                                    }\r\n                                </ClayDropDown.ItemList>\r\n                            </ClayDropDown.Group>\r\n                        </ClayDropDown>\r\n                    </li>\r\n\r\n                </ul>\r\n                <ul className=\"navbar-nav full-width mx-2\">\r\n                    <li className=\"nav-item full-width\">\r\n                        <ClayManagementToolbar.Search>\r\n                            <ClayInput.Group>\r\n                                <ClayInput.GroupItem>\r\n                                    <ClayInput\r\n                                        aria-label=\"Search\"\r\n                                        className=\"form-control input-group-inset input-group-inset-after\"\r\n                                        type=\"text\"\r\n                                        defaultValue={search}\r\n                                        onKeyUp={handleSearch}\r\n                                        id=\"searchInput\"\r\n                                        placeholder=\"Search\"\r\n                                    />\r\n                                    <ClayInput.GroupInsetItem after tag=\"span\">\r\n                                        <ClayButton\r\n                                            displayType=\"unstyled\"\r\n                                            type=\"submit\"\r\n                                        >\r\n                                            <ClayIcon symbol=\"search\" />\r\n                                        </ClayButton>\r\n                                    </ClayInput.GroupInsetItem>\r\n                                </ClayInput.GroupItem>\r\n                            </ClayInput.Group>\r\n                        </ClayManagementToolbar.Search>\r\n                    </li>\r\n                </ul>\r\n                <ul className=\"navbar-nav\">\r\n                    <li className=\"nav-item\">\r\n                        <button className=\"btn btn-unstyled nav-btn nav-btn-monospaced mx-2\" type=\"button\">\r\n                            <ClayIcon symbol=\"adjust\" />\r\n                        </button>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <button className=\"btn btn-unstyled nav-btn nav-btn-monospaced mx-2\" type=\"button\" onClick={handleFilterByFavorite}>\r\n                            <ClayIcon symbol={filterByFavorite ? 'star' : 'star-o'} />\r\n                        </button>\r\n                    </li>\r\n                    <li className=\"dropdown nav-item\">\r\n                        <ClayDropDown\r\n                            trigger={<button className=\"btn btn-unstyled nav-btn nav-btn-monospaced mx-2\">\r\n                                <ClayIcon symbol={listMode == 'grid' ? 'cards2' : 'cards-full'} />\r\n                            </button>}\r\n                            active={menuListModeActive}\r\n                            onActiveChange={setMenuListModeActive}\r\n                        >\r\n                            <ClayDropDown.ItemList>\r\n                                <ClayDropDown.Item onClick={() => handleListMode('grid')}>\r\n                                    <ClayIcon symbol=\"cards2\" className=\"mr-2\" />\r\n                                    Cards\r\n                                </ClayDropDown.Item>\r\n                                <ClayDropDown.Item onClick={() => handleListMode('list')}>\r\n                                    <ClayIcon symbol=\"cards-full\" className=\"mr-2\" />\r\n                                    List\r\n                                </ClayDropDown.Item>\r\n                            </ClayDropDown.ItemList>\r\n                        </ClayDropDown>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <ClayDropDown\r\n                            trigger={\r\n                                <button className=\"btn btn-primary btn-monospaced ml-3\" type=\"button\">\r\n                                    <ClayIcon symbol=\"plus\" />\r\n                                </button>\r\n                            }\r\n                            active={menuAddActive}\r\n                            onActiveChange={setMenuAddActive}\r\n                            className=\"modal-add-repository-dropdown\"\r\n                        >\r\n                            <AddRepository\r\n                                onCancel={setMenuAddActive}\r\n                                onAdd={() => {\r\n                                    onAdd();\r\n                                    setMenuAddActive(false);\r\n                                }} />\r\n                        </ClayDropDown>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","C:\\Users\\Pichau\\Documents\\projetos\\liferay-app\\src\\pages\\Main.js",["56","57"],"import '../App.css';\r\nimport \"@clayui/css/lib/css/atlas.css\";\r\nimport Navbar from '../components/navbar';\r\nimport CardRepo from '../components/cardRepository';\r\nimport { useEffect, useState } from 'react';\r\nimport { index } from '../services/repositories';\r\nimport ClayEmptyState from '@clayui/empty-state';\r\nimport { isFavorite } from '../utils/utils';\r\nimport ClayButton from '@clayui/button';\r\n\r\nexport default function Main() {\r\n    const [repositories, setRepositories] = useState([]);\r\n    const [search, setSearch] = useState('');\r\n    const [sort, setSort] = useState('');\r\n    const [filterByFavorite, setFilterByFavorite] = useState(false);\r\n    const [listMode, setListMode] = useState('grid');\r\n\r\n    useEffect(() => {\r\n        getRepositories();\r\n    }, [search, filterByFavorite, sort]);\r\n\r\n    function getRepositories() {\r\n        let data = index();\r\n        if (filterByFavorite) {\r\n            data = data.filter(_repository => isFavorite(_repository.id));\r\n        }\r\n        if (search) {\r\n            const term = search.toLowerCase();\r\n            data = data.filter(_repository => _repository.full_name && _repository.full_name.toLowerCase().includes(term));\r\n        }\r\n        if (sort) {\r\n            data = data.sort((a, b) => a[sort] < b[sort] ? 1 : -1);\r\n        }\r\n        setRepositories(data);\r\n    }\r\n\r\n    function handleSearch(value) {\r\n        setSearch(value);\r\n    }\r\n\r\n    async function handleFilterByFavorite(value) {\r\n        setFilterByFavorite(value);\r\n    }\r\n\r\n    function handleClearFilter() {\r\n        setSearch('');\r\n        setSort('');\r\n    }\r\n\r\n    function handleSort(value) {\r\n        setSort(value);\r\n    }\r\n\r\n    function handleListMode(mode) {\r\n        setListMode(mode);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Navbar\r\n                search={search}\r\n                onSearch={handleSearch}\r\n                onAdd={getRepositories}\r\n                onSort={handleSort}\r\n                onListModeChange={handleListMode}\r\n                onFilterByFavorite={handleFilterByFavorite} />\r\n\r\n            <div className=\"container full-width pt-3\">\r\n                <div className=\"row\">\r\n                    {repositories.map(_repository => (\r\n                        <div key={_repository.id} className={listMode == 'list' ? 'col-12' : 'col-4'}>\r\n                            <CardRepo\r\n                                key={_repository.id}\r\n                                type={listMode}\r\n                                repository={_repository}\r\n                                onHandleStar={getRepositories}\r\n                                onDelete={getRepositories} />\r\n                        </div>\r\n                    ))}\r\n                    {repositories.length < 1 && (\r\n                        <ClayEmptyState\r\n                            description=\"Add some repositories by clicking add new repository\"\r\n                            imgSrc=\"/empty.svg\"\r\n                            title=\"There is still nothing here\"\r\n                        >\r\n                            <ClayButton displayType=\"secondary\" onClick={handleClearFilter}>Clear Filter</ClayButton>\r\n                        </ClayEmptyState>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}","C:\\Users\\Pichau\\Documents\\projetos\\liferay-app\\src\\services\\repositories.js",["58"],"import { api } from './api';\r\n\r\nexport async function getRepository(name) {\r\n    const response = await api.get(`/repos/${name}`);\r\n    return response;\r\n}\r\n\r\nexport function index() {\r\n    const data = window.localStorage.getItem('repositories');\r\n    return data ? JSON.parse(data) : [];\r\n}\r\n\r\nexport function store(repository) {\r\n    let data = index();\r\n    data.unshift(repository);\r\n    window.localStorage.setItem('repositories', JSON.stringify(data));\r\n}\r\n\r\nexport function destroy(repository) {\r\n    let data = index();\r\n    const _index = data.findIndex(_repo => _repo.id == repository.id);\r\n    data.splice(_index, 1);\r\n    window.localStorage.setItem('repositories', JSON.stringify(data));\r\n}","C:\\Users\\Pichau\\Documents\\projetos\\liferay-app\\src\\services\\api.js",[],"C:\\Users\\Pichau\\Documents\\projetos\\liferay-app\\src\\utils\\utils.js",[],"C:\\Users\\Pichau\\Documents\\projetos\\liferay-app\\src\\components\\addRepository.js",["59"],"C:\\Users\\Pichau\\Documents\\projetos\\liferay-app\\src\\components\\modalConfirmDelete.js",["60"],"import \"@clayui/css/lib/css/atlas.css\";\r\nimport ClayModal, { useModal } from '@clayui/modal';\r\nimport ClayButton from '@clayui/button';\r\nimport { useState } from 'react';\r\n\r\nexport default function ModalConfirmDelete({ repository, onConfirm, onCancel }) {\r\n    const { observer, onClose } = useModal({\r\n        onClose: () => {onCancel() }\r\n    });\r\n\r\n    function handleConfirm() {\r\n        onConfirm();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ClayModal\r\n                observer={observer}\r\n                size=\"sm\"\r\n                status=\"info\"\r\n                center={true}\r\n                className=\"modal-warning\"\r\n            >\r\n                <ClayModal.Header>Delete repository</ClayModal.Header>\r\n                <ClayModal.Body>\r\n                    <p>Are you sure to delete the <strong>{repository.full_name}</strong> repository?</p>\r\n                </ClayModal.Body>\r\n                <ClayModal.Footer\r\n                    last={\r\n                        <ClayButton.Group spaced>\r\n                            <ClayButton onClick={onClose} displayType=\"secondary\">Cancel</ClayButton>\r\n                            <ClayButton onClick={handleConfirm} displayType=\"secondary\" className=\"text-white bg-warning\">Delete</ClayButton>\r\n                        </ClayButton.Group>\r\n                    }\r\n                />\r\n            </ClayModal>\r\n        </>\r\n    )\r\n}","C:\\Users\\Pichau\\Documents\\projetos\\liferay-app\\src\\components\\cardRepository.js",["61","62","63"],"import \"@clayui/css/lib/css/atlas.css\";\r\nimport ClayCard from '@clayui/card';\r\nimport ClayLabel from '@clayui/label';\r\nimport { isFavorite, markAsFavorite, unmarkAsFavorite } from '../utils/utils';\r\nimport { destroy } from '../services/repositories';\r\nimport ModalConfirmDelete from './modalConfirmDelete';\r\nimport { useState } from 'react';\r\nimport ClayIcon from '@clayui/icon';\r\n\r\nexport default function CardRepository({ type, repository, onHandleStar, onDelete }) {\r\n\r\n    const [showModalConfirmDelete, setShowModalConfirmDelete] = useState(false);\r\n\r\n    function handleStar() {\r\n        isFavorite(repository.id) ? unmarkAsFavorite(repository.id) : markAsFavorite(repository.id);\r\n        onHandleStar();\r\n    }\r\n\r\n    function handleDelete() {\r\n        destroy(repository);\r\n        onDelete();\r\n    }\r\n\r\n    if (!repository) return null;\r\n\r\n    function cardGrid() {\r\n        return (\r\n            <ClayCard displayType=\"file\">\r\n                <ClayCard.Body>\r\n                    <ClayCard.Row className=\"align-items-center justify-content-between \">\r\n                        <ClayCard.Description displayType=\"title\" >\r\n                            <img className=\"avatar\" src={repository.owner.avatar_url} />\r\n                            {repository.full_name}\r\n                        </ClayCard.Description>\r\n                        <div className=\"row\">\r\n                            <button className=\"btn btn-unstyled nav-btn nav-btn-monospaced\" type=\"button\" onClick={handleStar}>\r\n                                <ClayIcon symbol={isFavorite(repository.id) ? 'star' : 'star-o'} />\r\n                            </button>\r\n                            <button className=\"btn btn-unstyled nav-btn nav-btn-monospaced\" type=\"button\" onClick={() => setShowModalConfirmDelete(true)}>\r\n                                <ClayIcon symbol=\"trash\" />\r\n                            </button>\r\n                        </div>\r\n                    </ClayCard.Row>\r\n                    <ClayCard.Row>\r\n                        <div className=\"autofit-col autofit-col-expand\">\r\n                            <section className=\"autofit-section\">\r\n                                <ClayCard.Row className=\"align-items-center\">\r\n                                    <ClayCard.Description displayType=\"title\" className=\"mr-2\">Stars</ClayCard.Description>\r\n                                    <ClayCard.Description displayType=\"text\">{repository.stargazers_count}</ClayCard.Description>\r\n                                </ClayCard.Row>\r\n                                <ClayCard.Row className=\"align-items-center\">\r\n                                    <ClayCard.Description displayType=\"title\" className=\"mr-2\">Forks</ClayCard.Description>\r\n                                    <ClayCard.Description displayType=\"text\">{repository.forks_count}</ClayCard.Description>\r\n                                </ClayCard.Row>\r\n                                <ClayCard.Row className=\"align-items-center\">\r\n                                    <ClayCard.Description displayType=\"title\" className=\"mr-2\">Open Issues</ClayCard.Description>\r\n                                    <ClayCard.Description displayType=\"text\">{repository.open_issues_count}</ClayCard.Description>\r\n                                </ClayCard.Row>\r\n                                <ClayCard.Row className=\"align-items-center\">\r\n                                    <ClayCard.Description displayType=\"title\" className=\"mr-2\">Age</ClayCard.Description>\r\n                                    <ClayCard.Description displayType=\"text\">{repository.created_at}</ClayCard.Description>\r\n                                </ClayCard.Row>\r\n                                <ClayCard.Row className=\"align-items-center\">\r\n                                    <ClayCard.Description displayType=\"title\" className=\"mr-2\">Last Commit</ClayCard.Description>\r\n                                    <ClayCard.Description displayType=\"text\">{repository.last_commit_date}</ClayCard.Description>\r\n                                </ClayCard.Row>\r\n                                <ClayCard.Row className=\"align-items-center\">\r\n                                    <ClayCard.Description displayType=\"title\" className=\"mr-2\">License</ClayCard.Description>\r\n                                    <ClayCard.Description displayType=\"text\">{repository.license && repository.license.name}</ClayCard.Description>\r\n                                </ClayCard.Row>\r\n                                <ClayCard.Caption>\r\n                                    {repository.language && <ClayLabel displayType=\"warning\">{repository.language}</ClayLabel>}\r\n                                </ClayCard.Caption>\r\n                            </section>\r\n                        </div>\r\n                    </ClayCard.Row>\r\n                </ClayCard.Body>\r\n            </ClayCard>\r\n        )\r\n    }\r\n\r\n    function cardList() {\r\n        return (\r\n            <ClayCard displayType=\"file\" className=\"mb-2\">\r\n                <ClayCard.Body className=\"px-4\">\r\n\r\n                    <ClayCard.Row>\r\n                        <div>\r\n                            <img className=\"avatar\" src={repository.owner.avatar_url} />\r\n                        </div>\r\n                        <div className=\"full-width\">\r\n                            <ClayCard.Row className=\"align-items-center justify-content-between \">\r\n                                <ClayCard.Description displayType=\"title\" >\r\n                                    {repository.full_name}\r\n                                </ClayCard.Description>\r\n                                <div className=\"row\">\r\n                                    <button className=\"btn btn-unstyled nav-btn nav-btn-monospaced\" type=\"button\" onClick={handleStar}>\r\n                                        <ClayIcon symbol={isFavorite(repository.id) ? 'star' : 'star-o'} />\r\n                                    </button>\r\n                                    <button className=\"btn btn-unstyled nav-btn nav-btn-monospaced\" type=\"button\" onClick={() => setShowModalConfirmDelete(true)}>\r\n                                        <ClayIcon symbol=\"trash\" />\r\n                                    </button>\r\n                                </div>\r\n                            </ClayCard.Row>\r\n                            <ClayCard.Row className=\"align-items-center \">\r\n                                <div className=\"mr-4\">\r\n                                    <ClayCard.Row className=\"align-items-center\">\r\n                                        <ClayCard.Description displayType=\"title\" className=\"mr-2\">Stars</ClayCard.Description>\r\n                                        <ClayCard.Description displayType=\"text\">{repository.stargazers_count}</ClayCard.Description>\r\n                                    </ClayCard.Row>\r\n                                </div>\r\n                                <div className=\"mr-4\">\r\n                                    <ClayCard.Row className=\"align-items-center\">\r\n                                        <ClayCard.Description displayType=\"title\" className=\"mr-2\">Forks</ClayCard.Description>\r\n                                        <ClayCard.Description displayType=\"text\">{repository.forks_count}</ClayCard.Description>\r\n                                    </ClayCard.Row>\r\n                                </div>\r\n                                <div className=\"mr-4\">\r\n                                    <ClayCard.Row className=\"align-items-center\">\r\n                                        <ClayCard.Description displayType=\"title\" className=\"mr-2\">Open Issues</ClayCard.Description>\r\n                                        <ClayCard.Description displayType=\"text\">{repository.open_issues_count}</ClayCard.Description>\r\n                                    </ClayCard.Row>\r\n                                </div>\r\n                                <div className=\"mr-4\">\r\n                                    <ClayCard.Row className=\"align-items-center\">\r\n                                        <ClayCard.Description displayType=\"title\" className=\"mr-2\">Age</ClayCard.Description>\r\n                                        <ClayCard.Description displayType=\"text\">{repository.created_at}</ClayCard.Description>\r\n                                    </ClayCard.Row>\r\n                                </div>\r\n                                <div className=\"mr-4\">\r\n                                    <ClayCard.Row className=\"align-items-center\">\r\n                                        <ClayCard.Description displayType=\"title\" className=\"mr-2\">Last Commit</ClayCard.Description>\r\n                                        <ClayCard.Description displayType=\"text\">{repository.last_commit_date}</ClayCard.Description>\r\n                                    </ClayCard.Row>\r\n                                </div>\r\n                                <div className=\"mr-4\">\r\n                                    <ClayCard.Row className=\"align-items-center\">\r\n                                        <ClayCard.Description displayType=\"title\" className=\"mr-2\">License</ClayCard.Description>\r\n                                        <ClayCard.Description displayType=\"text\">{repository.license && repository.license.name}</ClayCard.Description>\r\n                                    </ClayCard.Row>\r\n                                </div>\r\n                            </ClayCard.Row>\r\n                            <ClayCard.Caption>\r\n                                {repository.language && <ClayLabel displayType=\"warning\">{repository.language}</ClayLabel>}\r\n                            </ClayCard.Caption>\r\n                        </div>\r\n                    </ClayCard.Row>\r\n                </ClayCard.Body>\r\n            </ClayCard>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {type == 'list' ? cardList() : cardGrid()}\r\n\r\n            {\r\n                showModalConfirmDelete && (\r\n                    <ModalConfirmDelete\r\n                        repository={repository}\r\n                        onCancel={setShowModalConfirmDelete}\r\n                        onConfirm={handleDelete} />\r\n                )\r\n            }\r\n        </>\r\n    )\r\n}",{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":49,"column":25,"nodeType":"70","endLine":49,"endColumn":104},{"ruleId":"71","severity":1,"message":"72","line":125,"column":60,"nodeType":"73","messageId":"74","endLine":125,"endColumn":62},{"ruleId":"75","severity":1,"message":"76","line":20,"column":8,"nodeType":"77","endLine":20,"endColumn":40,"suggestions":"78"},{"ruleId":"71","severity":1,"message":"72","line":71,"column":71,"nodeType":"73","messageId":"74","endLine":71,"endColumn":73},{"ruleId":"71","severity":1,"message":"72","line":21,"column":53,"nodeType":"73","messageId":"74","endLine":21,"endColumn":55},{"ruleId":"79","severity":1,"message":"80","line":7,"column":8,"nodeType":"81","messageId":"82","endLine":7,"endColumn":17},{"ruleId":"79","severity":1,"message":"83","line":4,"column":10,"nodeType":"81","messageId":"82","endLine":4,"endColumn":18},{"ruleId":"68","severity":1,"message":"69","line":32,"column":29,"nodeType":"70","endLine":32,"endColumn":89},{"ruleId":"68","severity":1,"message":"69","line":89,"column":29,"nodeType":"70","endLine":89,"endColumn":89},{"ruleId":"71","severity":1,"message":"72","line":155,"column":19,"nodeType":"73","messageId":"74","endLine":155,"endColumn":21},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getRepositories'. Either include it or remove the dependency array.","ArrayExpression",["86"],"no-unused-vars","'ClayAlert' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},"Update the dependencies array to be: [search, filterByFavorite, sort, getRepositories]",{"range":"89","text":"90"},[767,799],"[search, filterByFavorite, sort, getRepositories]"]